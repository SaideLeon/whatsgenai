ARQUIVOS JAVASCRIPT
================================================================================
Diretório base: ./src
========================================

================================================================================
Arquivo: ./src/App.jsx
================================================================================

import React from "react";
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import { AuthProvider } from "./contexts/AuthContext";
import Home from "./pages/Home.jsx";
import Login from "./pages/Login.jsx";
import Register from "./pages/Register.jsx";
import Dashboard from "./pages/Dashboard.jsx";
import PrivateRoute from "./components/PrivateRoute";

function App() {
  return (
    <AuthProvider>
      <Router>
        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/login" element={<Login />} />
          <Route path="/register" element={<Register />} />
          <Route path="/dashboard/*" element={
            <PrivateRoute>
              <Dashboard />
            </PrivateRoute>
          } />
        </Routes>
      </Router>
    </AuthProvider>
  );
}

export default App;

================================================================================
Arquivo: ./src/main.jsx
================================================================================

import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.jsx'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
)


================================================================================
Arquivo: ./src/components/PrivateRoute.jsx
================================================================================

import React from 'react';
import { Navigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';

const PrivateRoute = ({ children }) => {
  const { isAuthenticated, loading } = useAuth();

  if (loading) {
    return <div>Loading...</div>;
  }

  return isAuthenticated() ? children : <Navigate to="/login" />;
};

export default PrivateRoute;

================================================================================
Arquivo: ./src/pages/Home.jsx
================================================================================

import React, { useState } from 'react';
import { Menu, X, Bot, MessageCircle, Brain, Zap, Users, BarChart, ArrowRight, Check } from 'lucide-react';

const Home = () => {
  const [isMenuOpen, setIsMenuOpen] = useState(false);

  const features = [
    {
      icon: <Bot className="w-6 h-6" />,
      title: "Agentes Especializados",
      description: "Cada agente é treinado em uma área específica, garantindo atendimento preciso e profissional."
    },
    {
      icon: <Brain className="w-6 h-6" />,
      title: "IA Contextual",
      description: "Sistema inteligente que direciona cada cliente para o agente mais adequado automaticamente."
    },
    {
      icon: <MessageCircle className="w-6 h-6" />,
      title: "Único Número",
      description: "Gerencie infinitos agentes inteligentes usando apenas um número de WhatsApp."
    }
  ];

  const benefits = [
    "Atendimento 24/7 sem custos adicionais",
    "Aumento significativo na taxa de conversão",
    "Redução de custos operacionais",
    "Escalabilidade ilimitada",
    "Respostas personalizadas e contextuais",
    "Integração simples e rápida"
  ];

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-900">
      {/* Navbar */}
      <nav className="backdrop-blur-md bg-black/30 fixed w-full z-50">
        <div className="container mx-auto px-4 py-3">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <Bot className="w-8 h-8 text-blue-400" />
              <span className="text-2xl font-bold bg-gradient-to-r from-blue-400 to-teal-400 bg-clip-text text-transparent">
                WhatsGenAI
              </span>
            </div>
            
            {/* Desktop Menu */}
            <div className="hidden md:flex space-x-8">
              <a href="#home" className="text-white hover:text-blue-400 transition-colors">Home</a>
              <a href="#features" className="text-white hover:text-blue-400 transition-colors">Recursos</a>
              <a href="#how-it-works" className="text-white hover:text-blue-400 transition-colors">Como Funciona</a>
              <a href="#pricing" className="text-white hover:text-blue-400 transition-colors">Preços</a>
            </div>

            {/* Mobile Menu Button */}
            <button onClick={() => setIsMenuOpen(!isMenuOpen)} className="md:hidden text-white">
              {isMenuOpen ? <X /> : <Menu />}
            </button>
          </div>

          {/* Mobile Menu */}
          {isMenuOpen && (
            <div className="md:hidden py-4">
              <div className="flex flex-col space-y-4">
                <a href="#home" className="text-white hover:text-blue-400 transition-colors">Home</a>
                <a href="#features" className="text-white hover:text-blue-400 transition-colors">Recursos</a>
                <a href="#how-it-works" className="text-white hover:text-blue-400 transition-colors">Como Funciona</a>
                <a href="#pricing" className="text-white hover:text-blue-400 transition-colors">Preços</a>
              </div>
            </div>
          )}
        </div>
      </nav>

      {/* Hero Section */}
      <section id="home" className="pt-24 md:pt-32 px-4">
        <div className="container mx-auto">
          <div className="flex flex-col md:flex-row items-center justify-between">
            <div className="md:w-1/2 text-center md:text-left">
              <h1 className="text-4xl md:text-6xl font-bold text-white mb-6">
                Revolucione seu 
                <span className="bg-gradient-to-r from-blue-400 to-teal-400 bg-clip-text text-transparent"> Atendimento</span>
              </h1>
              <p className="text-gray-300 text-lg mb-8">
                Transforme um único número de WhatsApp em uma equipe completa de agentes inteligentes especializados, prontos para atender seus clientes 24/7.
              </p>
              <div className="flex flex-col md:flex-row gap-4 justify-center md:justify-start">
                <button className="bg-gradient-to-r from-blue-500 to-teal-500 text-white px-8 py-3 rounded-full hover:opacity-90 transition-opacity flex items-center gap-2 justify-center">
                  Começar Agora <ArrowRight className="w-5 h-5" />
                </button>
                <button className="border border-white/20 text-white px-8 py-3 rounded-full hover:bg-white/10 transition-colors flex items-center gap-2 justify-center">
                  Ver Demonstração
                </button>
              </div>
            </div>
            <div className="md:w-1/2 mt-12 md:mt-0">
              <div className="w-full h-96 bg-gradient-to-tr from-blue-500/20 to-teal-500/20 rounded-2xl backdrop-blur-sm border border-white/10 flex items-center justify-center relative overflow-hidden">
                <img src="/api/placeholder/600/400" alt="WhatsGenAI Dashboard" className="rounded-xl" />
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Stats Section */}
      <section className="py-20 px-4">
        <div className="container mx-auto">
          <div className="grid md:grid-cols-3 gap-8 text-center">
            <div className="backdrop-blur-sm bg-white/5 border border-white/10 rounded-xl p-6">
              <div className="text-3xl md:text-4xl font-bold text-blue-400 mb-2">95%</div>
              <div className="text-white">Taxa de Satisfação</div>
            </div>
            <div className="backdrop-blur-sm bg-white/5 border border-white/10 rounded-xl p-6">
              <div className="text-3xl md:text-4xl font-bold text-teal-400 mb-2">24/7</div>
              <div className="text-white">Disponibilidade</div>
            </div>
            <div className="backdrop-blur-sm bg-white/5 border border-white/10 rounded-xl p-6">
              <div className="text-3xl md:text-4xl font-bold text-blue-400 mb-2">+300%</div>
              <div className="text-white">Aumento em Conversões</div>
            </div>
          </div>
        </div>
      </section>

      {/* Features Section */}
      <section id="features" className="py-20 px-4">
        <div className="container mx-auto">
          <h2 className="text-3xl md:text-4xl font-bold text-center text-white mb-12">
            Recursos Avançados
          </h2>
          <div className="grid md:grid-cols-3 gap-8">
            {features.map((feature, index) => (
              <div key={index} className="backdrop-blur-sm bg-white/5 border border-white/10 rounded-xl p-6 hover:bg-white/10 transition-colors">
                <div className="text-blue-400 mb-4">{feature.icon}</div>
                <h3 className="text-xl font-semibold text-white mb-2">{feature.title}</h3>
                <p className="text-gray-300">{feature.description}</p>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* How it Works Section */}
      <section id="how-it-works" className="py-20 px-4 bg-gradient-to-b from-transparent via-black/50 to-transparent">
        <div className="container mx-auto">
          <h2 className="text-3xl md:text-4xl font-bold text-center text-white mb-12">
            Como Funciona
          </h2>
          <div className="grid md:grid-cols-4 gap-8">
            <div className="text-center">
              <div className="w-16 h-16 rounded-full bg-blue-500/20 flex items-center justify-center mx-auto mb-4">
                <MessageCircle className="w-8 h-8 text-blue-400" />
              </div>
              <h3 className="text-white font-semibold mb-2">Conecte seu WhatsApp</h3>
              <p className="text-gray-300">Integração simples com um único número</p>
            </div>
            <div className="text-center">
              <div className="w-16 h-16 rounded-full bg-blue-500/20 flex items-center justify-center mx-auto mb-4">
                <Users className="w-8 h-8 text-blue-400" />
              </div>
              <h3 className="text-white font-semibold mb-2">Configure seus Agentes</h3>
              <p className="text-gray-300">Defina especialidades e comportamentos</p>
            </div>
            <div className="text-center">
              <div className="w-16 h-16 rounded-full bg-blue-500/20 flex items-center justify-center mx-auto mb-4">
                <Brain className="w-8 h-8 text-blue-400" />
              </div>
              <h3 className="text-white font-semibold mb-2">IA Analisa Contexto</h3>
              <p className="text-gray-300">Direcionamento automático inteligente</p>
            </div>
            <div className="text-center">
              <div className="w-16 h-16 rounded-full bg-blue-500/20 flex items-center justify-center mx-auto mb-4">
                <BarChart className="w-8 h-8 text-blue-400" />
              </div>
              <h3 className="text-white font-semibold mb-2">Monitore Resultados</h3>
              <p className="text-gray-300">Analytics e insights em tempo real</p>
            </div>
          </div>
        </div>
      </section>

      {/* Benefits Section */}
      <section className="py-20 px-4">
        <div className="container mx-auto">
          <h2 className="text-3xl md:text-4xl font-bold text-center text-white mb-12">
            Benefícios
          </h2>
          <div className="grid md:grid-cols-2 gap-8 max-w-4xl mx-auto">
            {benefits.map((benefit, index) => (
              <div key={index} className="flex items-center space-x-4">
                <div className="flex-shrink-0">
                  <Check className="w-6 h-6 text-teal-400" />
                </div>
                <p className="text-white">{benefit}</p>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="py-20 px-4">
        <div className="container mx-auto">
          <div className="backdrop-blur-sm bg-white/5 border border-white/10 rounded-2xl p-8 md:p-12">
            <div className="text-center">
              <h2 className="text-3xl md:text-4xl font-bold text-white mb-6">
                Pronto para Transformar seu Atendimento?
              </h2>
              <p className="text-gray-300 mb-8 max-w-2xl mx-auto">
                Junte-se a empresas que já revolucionaram seu atendimento com o WhatsGenAI. Comece agora e veja seus resultados multiplicarem.
              </p>
              <button className="bg-gradient-to-r from-blue-500 to-teal-500 text-white px-8 py-3 rounded-full hover:opacity-90 transition-opacity flex items-center gap-2 mx-auto">
                Começar Gratuitamente <ArrowRight className="w-5 h-5" />
              </button>
            </div>
          </div>
        </div>
      </section>

      {/* Footer */}
      <footer className="backdrop-blur-md bg-black/30 py-8">
        <div className="container mx-auto px-4">
          <div className="flex flex-col md:flex-row justify-between items-center">
            <div className="flex items-center space-x-2 mb-4 md:mb-0">
              <Bot className="w-6 h-6 text-blue-400" />
              <span className="text-white">WhatsGenAI</span>
            </div>
            <div className="text-gray-400">
              &copy; 2024 WhatsGenAI. Todos os direitos reservados.
            </div>
          </div>
        </div>
      </footer>
    </div>
  );
};

export default Home;

================================================================================
Arquivo: ./src/pages/Login.jsx
================================================================================

// src/pages/Login.jsx
import React, { useState } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import { Bot, Loader2 } from 'lucide-react';

const Login = () => {
  const navigate = useNavigate();
  const { login } = useAuth();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [formData, setFormData] = useState({
    email: '',
    password: ''
  });

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    const result = await login(formData.email, formData.password);
    
    if (result.success) {
      navigate('/dashboard');
    } else {
      setError(result.error);
    }
    
    setLoading(false);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-900 flex flex-col justify-center py-12 sm:px-6 lg:px-8">
      <div className="sm:mx-auto sm:w-full sm:max-w-md">
        <div className="flex justify-center">
          <Bot className="w-12 h-12 text-blue-400" />
        </div>
        <h2 className="mt-6 text-center text-3xl font-extrabold text-white">
          Entre na sua conta
        </h2>
        <p className="mt-2 text-center text-sm text-gray-300">
          Ou{' '}
          <Link to="/register" className="font-medium text-blue-400 hover:text-blue-300">
            crie uma nova conta
          </Link>
        </p>
      </div>

      <div className="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
        <div className="backdrop-blur-sm bg-white/5 border border-white/10 py-8 px-4 shadow sm:rounded-lg sm:px-10">
          {error && (
            <div className="mb-4 p-3 rounded bg-red-500/10 border border-red-500/20 text-red-400">
              {error}
            </div>
          )}
          
          <form className="space-y-6" onSubmit={handleSubmit}>
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-200">
                Email
              </label>
              <div className="mt-1">
                <input
                  id="email"
                  name="email"
                  type="email"
                  required
                  className="appearance-none block w-full px-3 py-2 border border-white/10 rounded-md shadow-sm bg-white/5 text-white placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                  value={formData.email}
                  onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                />
              </div>
            </div>

            <div>
              <label htmlFor="password" className="block text-sm font-medium text-gray-200">
                Senha
              </label>
              <div className="mt-1">
                <input
                  id="password"
                  name="password"
                  type="password"
                  required
                  className="appearance-none block w-full px-3 py-2 border border-white/10 rounded-md shadow-sm bg-white/5 text-white placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                  value={formData.password}
                  onChange={(e) => setFormData({ ...formData, password: e.target.value })}
                />
              </div>
            </div>

            <div>
              <button
                type="submit"
                disabled={loading}
                className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-gradient-to-r from-blue-500 to-teal-500 hover:opacity-90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50"
              >
                {loading ? (
                  <Loader2 className="w-5 h-5 animate-spin" />
                ) : (
                  'Entrar'
                )}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

export default Login;




================================================================================
Arquivo: ./src/pages/Register.jsx
================================================================================

// src/pages/Register.jsx
import React, { useState } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import { Bot, Loader2 } from 'lucide-react';

const Register = () => {
  const navigate = useNavigate();
  const { register } = useAuth();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [formData, setFormData] = useState({
    username: '',
    email: '',
    password: '',
    phoneNumber: ''
  });

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    const result = await register(formData);
    
    if (result.success) {
      navigate('/login');
    } else {
      setError(result.error);
    }
    
    setLoading(false);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-900 flex flex-col justify-center py-12 sm:px-6 lg:px-8">
      <div className="sm:mx-auto sm:w-full sm:max-w-md">
        <div className="flex justify-center">
          <Bot className="w-12 h-12 text-blue-400" />
        </div>
        <h2 className="mt-6 text-center text-3xl font-extrabold text-white">
          Crie sua conta
        </h2>
        <p className="mt-2 text-center text-sm text-gray-300">
          Ou{' '}
          <Link to="/login" className="font-medium text-blue-400 hover:text-blue-300">
            faça login na sua conta existente
          </Link>
        </p>
      </div>

      <div className="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
        <div className="backdrop-blur-sm bg-white/5 border border-white/10 py-8 px-4 shadow sm:rounded-lg sm:px-10">
          {error && (
            <div className="mb-4 p-3 rounded bg-red-500/10 border border-red-500/20 text-red-400">
              {error}
            </div>
          )}
          
          <form className="space-y-6" onSubmit={handleSubmit}>
            <div>
              <label htmlFor="username" className="block text-sm font-medium text-gray-200">
                Nome
              </label>
              <div className="mt-1">
                <input
                  id="username"
                  name="username"
                  type="text"
                  required
                  className="appearance-none block w-full px-3 py-2 border border-white/10 rounded-md shadow-sm bg-white/5 text-white placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                  value={formData.username}
                  onChange={(e) => setFormData({ ...formData, username: e.target.value })}
                />
              </div>
            </div>

            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-200">
                Email
              </label>
              <div className="mt-1">
                <input
                  id="email"
                  name="email"
                  type="email"
                  required
                  className="appearance-none block w-full px-3 py-2 border border-white/10 rounded-md shadow-sm bg-white/5 text-white placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                  value={formData.email}
                  onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                />
              </div>
            </div>

            <div>
              <label htmlFor="phoneNumber" className="block text-sm font-medium text-gray-200">
                Número de WhatsApp
              </label>
              <div className="mt-1">
                <input
                  id="phoneNumber"
                  name="phoneNumber"
                  type="tel"
                  required
                  placeholder="+258840123456"
                  className="appearance-none block w-full px-3 py-2 border border-white/10 rounded-md shadow-sm bg-white/5 text-white placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                  value={formData.phoneNumber}
                  onChange={(e) => setFormData({ ...formData, phoneNumber: e.target.value })}
                />
              </div>
            </div>

            <div>
              <label htmlFor="password" className="block text-sm font-medium text-gray-200">
                Senha
              </label>
              <div className="mt-1">
                <input
                  id="password"
                  name="password"
                  type="password"
                  required
                  className="appearance-none block w-full px-3 py-2 border border-white/10 rounded-md shadow-sm bg-white/5 text-white placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                  value={formData.password}
                  onChange={(e) => setFormData({ ...formData, password: e.target.value })}
                />
              </div>
            </div>

            <div>
              <button
                type="submit"
                disabled={loading}
                className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-gradient-to-r from-blue-500 to-teal-500 hover:opacity-90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50"
              >
                {loading ? (
                  <Loader2 className="w-5 h-5 animate-spin" />
                ) : (
                  'Criar conta'
                )}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

export default Register;


================================================================================
Arquivo: ./src/pages/Dashboard.jsx
================================================================================

import React, { useState, useEffect } from 'react';
import { Routes, Route, Link, useNavigate, useLocation } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import { sessionService, vendorService, sellerService, messageService } from '../services/api';
import { Bot, Menu, X, LogOut, MessageCircle, Users, Settings, PlusCircle, Loader2 } from 'lucide-react';

const Dashboard = () => {
  const navigate = useNavigate();
  const location = useLocation();
  const { user, logout } = useAuth();
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [loading, setLoading] = useState(true);
  const [stats, setStats] = useState({
    sessions: 0,
    vendors: 0,
    sellers: 0,
    messages: 0
  });

  useEffect(() => {
    loadStats();
  }, []);

  const loadStats = async () => {
    try {
      const [sessions, vendors, sellers, messages] = await Promise.all([
        sessionService.list(),
        vendorService.list(),
        sellerService.list(),
        messageService.list()
      ]);

      setStats({
        sessions: sessions.data.length,
        vendors: vendors.data.length,
        sellers: sellers.data.length,
        messages: messages.data.length
      });
    } catch (error) {
      console.error('Error loading stats:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleLogout = () => {
    logout();
    navigate('/login');
  };

  const navItems = [
    { path: '/dashboard', label: 'Visão Geral', icon: <Bot className="w-5 h-5" /> },
    { path: '/dashboard/sessions', label: 'Sessões', icon: <MessageCircle className="w-5 h-5" /> },
    { path: '/dashboard/contacts', label: 'Contatos', icon: <Users className="w-5 h-5" /> },
    { path: '/dashboard/settings', label: 'Configurações', icon: <Settings className="w-5 h-5" /> }
  ];

  const DashboardOverview = () => (
    <div className="grid gap-6 mb-8">
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        {/* Stats Cards */}
        <div className="bg-white/5 backdrop-blur-sm border border-white/10 rounded-lg p-6">
          <div className="flex justify-between items-center">
            <h3 className="text-gray-400">Sessões Ativas</h3>
            <MessageCircle className="w-5 h-5 text-blue-400" />
          </div>
          <p className="text-2xl font-semibold text-white mt-2">{stats.sessions}</p>
        </div>

        <div className="bg-white/5 backdrop-blur-sm border border-white/10 rounded-lg p-6">
          <div className="flex justify-between items-center">
            <h3 className="text-gray-400">Fornecedores</h3>
            <Users className="w-5 h-5 text-blue-400" />
          </div>
          <p className="text-2xl font-semibold text-white mt-2">{stats.vendors}</p>
        </div>

        <div className="bg-white/5 backdrop-blur-sm border border-white/10 rounded-lg p-6">
          <div className="flex justify-between items-center">
            <h3 className="text-gray-400">Vendedores</h3>
            <Users className="w-5 h-5 text-blue-400" />
          </div>
          <p className="text-2xl font-semibold text-white mt-2">{stats.sellers}</p>
        </div>

        <div className="bg-white/5 backdrop-blur-sm border border-white/10 rounded-lg p-6">
          <div className="flex justify-between items-center">
            <h3 className="text-gray-400">Mensagens</h3>
            <MessageCircle className="w-5 h-5 text-blue-400" />
          </div>
          <p className="text-2xl font-semibold text-white mt-2">{stats.messages}</p>
        </div>
      </div>

      {/* Quick Actions */}
      <div className="bg-white/5 backdrop-blur-sm border border-white/10 rounded-lg p-6">
        <h3 className="text-xl font-semibold text-white mb-4">Ações Rápidas</h3>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <button
            onClick={() => navigate('/dashboard/sessions/new')}
            className="flex items-center justify-center gap-2 px-4 py-2 bg-blue-500/20 text-blue-400 rounded-lg hover:bg-blue-500/30 transition-colors"
          >
            <PlusCircle className="w-5 h-5" />
            Nova Sessão
          </button>

          <button
            onClick={() => navigate('/dashboard/vendors/new')}
            className="flex items-center justify-center gap-2 px-4 py-2 bg-blue-500/20 text-blue-400 rounded-lg hover:bg-blue-500/30 transition-colors"
          >
            <PlusCircle className="w-5 h-5" />
            Novo Fornecedor
          </button>

          <button
            onClick={() => navigate('/dashboard/sellers/new')}
            className="flex items-center justify-center gap-2 px-4 py-2 bg-blue-500/20 text-blue-400 rounded-lg hover:bg-blue-500/30 transition-colors"
          >
            <PlusCircle className="w-5 h-5" />
            Novo Vendedor
          </button>
        </div>
      </div>
    </div>
  );

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-900">
      {/* Navbar */}
      <nav className="backdrop-blur-md bg-black/30 border-b border-white/10">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                <Bot className="h-8 w-8 text-blue-400" />
              </div>
              <div className="hidden md:block">
                <div className="ml-10 flex items-baseline space-x-4">
                  {navItems.map((item) => (
                    <Link
                      key={item.path}
                      to={item.path}
                      className={`flex items-center gap-2 px-3 py-2 rounded-md text-sm font-medium ${
                        location.pathname === item.path
                          ? 'bg-white/10 text-white'
                          : 'text-gray-300 hover:bg-white/5 hover:text-white'
                      }`}
                    >
                      {item.icon}
                      {item.label}
                    </Link>
                  ))}
                </div>
              </div>
            </div>

            <div className="hidden md:block">
              <div className="ml-4 flex items-center md:ml-6">
                <button
                  onClick={handleLogout}
                  className="flex items-center gap-2 px-3 py-2 rounded-md text-sm font-medium text-gray-300 hover:bg-white/5 hover:text-white"
                >
                  <LogOut className="w-5 h-5" />
                  Sair
                </button>
              </div>
            </div>

            <div className="md:hidden">
              <button
                onClick={() => setIsMenuOpen(!isMenuOpen)}
                className="inline-flex items-center justify-center p-2 rounded-md text-gray-400 hover:text-white hover:bg-white/5"
              >
                {isMenuOpen ? <X className="w-6 h-6" /> : <Menu className="w-6 h-6" />}
              </button>
            </div>
          </div>
        </div>

        {/* Mobile menu */}
        {isMenuOpen && (
          <div className="md:hidden border-t border-white/10">
            <div className="px-2 pt-2 pb-3 space-y-1">
              {navItems.map((item) => (
                <Link
                  key={item.path}
                  to={item.path}
                  className={`flex items-center gap-2 px-3 py-2 rounded-md text-base font-medium ${
                    location.pathname === item.path
                      ? 'bg-white/10 text-white'
                      : 'text-gray-300 hover:bg-white/5 hover:text-white'
                  }`}
                  onClick={() => setIsMenuOpen(false)}
                >
                  {item.icon}
                  {item.label}
                </Link>
              ))}
              <button
                onClick={handleLogout}
                className="flex items-center gap-2 px-3 py-2 rounded-md text-base font-medium text-gray-300 hover:bg-white/5 hover:text-white w-full"
              >
                <LogOut className="w-5 h-5" />
                Sair
              </button>
            </div>
          </div>
        )}
      </nav>

      {/* Main content */}
      <main className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
        {loading ? (
          <div className="flex justify-center items-center h-64">
            <Loader2 className="w-8 h-8 text-blue-400 animate-spin" />
          </div>
        ) : (
          <Routes>
            <Route path="/" element={<DashboardOverview />} />
            <Route path="/sessions" element={<div>Sessões</div>} />
            <Route path="/contacts" element={<div>Contatos</div>} />
            <Route path="/settings" element={<div>Configurações</div>} />
          </Routes>
        )}
      </main>
    </div>
  );
};

export default Dashboard;

================================================================================
Arquivo: ./src/services/api.js
================================================================================

// src/services/api.js
import axios from 'axios';

const api = axios.create({
  baseURL: 'https://api-sessions-production.up.railway.app/api/v1',
  headers: {
    'Content-Type': 'application/json',
  },
});

// Request interceptor for adding auth token
api.interceptors.request.use((config) => {
  const token = localStorage.getItem('whatsgenai_token');
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

// Response interceptor for handling errors
api.interceptors.response.use(
  (response) => response,
  async (error) => {
    if (error.response?.status === 401) {
      localStorage.removeItem('whatsgenai_token');
      window.location.href = '/login';
    }
    return Promise.reject(error);
  }
);

export const authService = {
  async login(email, password) {
    const response = await api.post('/auth/login', { email, password });
    return response.data;
  },

  async register(userData) {
    const response = await api.post('/users', userData);
    return response.data;
  },

  logout() {
    localStorage.removeItem('whatsgenai_token');
    localStorage.removeItem('whatsgenai_user');
  }
};

export const sessionService = {
  async create(sessionData) {
    const response = await api.post('/sessions', sessionData);
    return response.data;
  },

  async list() {
    const response = await api.get('/sessions');
    return response.data;
  }
};

export const vendorService = {
  async create(vendorData) {
    const response = await api.post('/vendors', vendorData);
    return response.data;
  },

  async list() {
    const response = await api.get('/vendors');
    return response.data;
  }
};

export const sellerService = {
  async create(sellerData) {
    const response = await api.post('/sellers', sellerData);
    return response.data;
  },

  async list() {
    const response = await api.get('/sellers');
    return response.data;
  }
};

export const messageService = {
  async create(messageData) {
    const response = await api.post('/messages', messageData);
    return response.data;
  },

  async list() {
    const response = await api.get('/messages');
    return response.data;
  },

  async getBatch(sessionId) {
    const response = await api.get(`/messages/batch/${sessionId}`);
    return response.data;
  }
};

export default api;



================================================================================
Arquivo: ./src/contexts/AuthContext.jsx
================================================================================

// src/contexts/AuthContext.jsx
import React, { createContext, useState, useContext, useEffect } from 'react';
import { authService } from '../services/api';

const AuthContext = createContext({});

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const storedUser = localStorage.getItem('whatsgenai_user');
    const token = localStorage.getItem('whatsgenai_token');
    
    if (storedUser && token) {
      setUser(JSON.parse(storedUser));
    }
    
    setLoading(false);
  }, []);

  const login = async (email, password) => {
    try {
      const response = await authService.login(email, password);
      
      if (response.status === 'success') {
        const { user, token } = response.data;
        
        localStorage.setItem('whatsgenai_token', token);
        localStorage.setItem('whatsgenai_user', JSON.stringify(user));
        
        setUser(user);
        return { success: true };
      }
      
      return { success: false, error: 'Credenciais inválidas' };
    } catch (error) {
      return { 
        success: false, 
        error: error.response?.data?.message || 'Erro ao fazer login' 
      };
    }
  };

  const register = async (userData) => {
    try {
      const response = await authService.register(userData);
      
      if (response.status === 'success') {
        return { success: true };
      }
      
      return { success: false, error: 'Erro ao criar conta' };
    } catch (error) {
      return { 
        success: false, 
        error: error.response?.data?.message || 'Erro ao criar conta' 
      };
    }
  };

  const logout = () => {
    authService.logout();
    setUser(null);
  };

  const isAuthenticated = () => {
    return !!user && !!localStorage.getItem('whatsgenai_token');
  };

  const value = {
    user,
    loading,
    login,
    logout,
    register,
    isAuthenticated
  };

  return (
    <AuthContext.Provider value={value}>
      {!loading && children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

